{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["message","clickedImages","randomlySortImages","arr","sort","Math","random","App","state","score","topScore","isClicked","imageId","i","images","length","handleClick","id","alerter","document","getElementById","_this","setState","setAttribute","animate","transform","duration","iterations","setTimeout","push","_this2","this","react_default","a","createElement","className","href","map","image","key","onClick","alt","src","process","relPath","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a154250.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport images from \"./images.json\"\n\nlet clickedImages = [];\nlet message;\n\nconst randomlySortImages = arr => arr.sort(() => Math.random() - 0.5);\n\nclass App extends React.Component {\n  state = {\n    score: 0,\n    topScore: 0\n  }\n\n  isClicked = imageId => {\n    for (let i = 0; i < images.length; i++) {\n      if (imageId === clickedImages[i]) { return true }\n    }\n    return false\n  }\n\n  componentWillMount() {\n    randomlySortImages(images);\n  }\n\n  handleClick = id => {\n    let alerter = document.getElementById(\"user-alert\");\n    if (this.isClicked(id)) {\n      clickedImages = []\n      randomlySortImages(images);\n      this.setState({ score: 0 })\n      message = \"Awww, you lose... Let's try again!\"\n      alerter.setAttribute(\"class\", \"red-text\")\n      alerter.animate(\n        [\n          { transform: \"translate3D(0,0,0)\"},\n          { transform: \"translate3D(15px,3px,0)\"},\n          { transform: \"translate3D(30px,6px,0)\"},\n          { transform: \"translate3D(15px,9px,0)\"},\n          { transform: \"translate3D(0,12px,0)\"},\n          { transform: \"translate3D(-15px,15px,0)\"},\n          { transform: \"translate3D(-30px,18px,0)\"},\n          { transform: \"translate3D(-15px,21px,0)\"},\n          { transform: \"translate3D(0px,24px,0)\"},\n          { transform: \"translate3D(0px,12px,0)\"},\n          { transform: \"translate3D(0px,0px,0)\"}\n        ],\n        { duration: 1500, iterations: 1 }\n      )\n      setTimeout(() => alerter.setAttribute(\"class\", \"message-box\"), 1000)\n    } else {\n      message = \"Nice! Keep it up!\"\n      clickedImages.push(id);\n      this.setState({ score: this.state.score + 1 })\n      randomlySortImages(images);\n      if (this.state.score >= this.state.topScore) {\n        this.setState({ topScore: this.state.score + 1 })\n      }\n      if (alerter) {\n        alerter.setAttribute(\"class\", \"green-text\")\n      alerter.animate(\n        [\n          { transform: \"translate3D(0,0,0)\"},\n          { transform: \"translate3D(2px,-7px,0)\"},\n          { transform: \"translate3D(4px,0px,0)\"},\n          { transform: \"translate3D(2px,-7px,0)\"},\n          { transform: \"translate3D(0,0px,0)\"},\n          { transform: \"translate3D(-2px,-7px,0)\"},\n          { transform: \"translate3D(-4px,0px,0)\"},\n          { transform: \"translate3D(-2px,-7px,0)\"},\n          { transform: \"translate3D(0px,0px,0)\"}\n        ],\n        { duration: 700, iterations: 1 }\n      )\n      setTimeout(() => alerter.setAttribute(\"class\", \"message-box\"), 700)\n    }\n    }\n  };\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-light\">\n          <span><a className=\"navbar-brand\" href=\"/\">Clicky Game</a></span>\n          <span className=\"h3\">Score: {this.state.score}</span>\n          <span className=\"h3\">Top Score: {this.state.topScore}</span>\n        </nav>\n        <div className=\"container\">\n          <div className=\"row text-center intro\">\n            {(this.state.topScore === 0) ?\n              <h3 className=\"message-box\">Welcome to the Clicky-Game! If you click an image more than once, you lose. See if you can score a 15!</h3>\n              : <h5 id=\"user-alert\" className=\"message-box\">{message}</h5>\n            }\n            <br /><hr />\n          </div>\n          <div className=\"row\">\n            {images.map(image =>\n              <a key={image.id} href=\"# \" className=\"image-box col-md-2\" onClick={() => this.handleClick(image.id)}>\n                <div className=\"card\">\n                  <img alt=\" \" src={process.env.PUBLIC_URL + \"/img/\" + image.relPath} />\n                </div>\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}